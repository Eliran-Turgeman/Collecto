{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Collecto","text":"<p>Collecto is a open-source, self-hosted, lightweight, email collection service.</p> <p>Source Code: https://github.com/Eliran-Turgeman/Collecto Dockerhub Repository: https://hub.docker.com/r/elirant/collecto/tags</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Multi-tenancy: Host multiple forms and tenants with isolated data and settings.</li> <li>Create forms: Easily generate forms for collecting user emails.</li> <li>Accept form signups: Securely capture form submissions and store them.</li> <li>Forms dashboard: Manage, track, and analyze submissions from a simple interface.</li> </ul>"},{"location":"api/","title":"Collecto","text":"<p>API for managing email collection forms.</p> <p>NOTE: You can also view the same contents within the app using swagger. Start the application and go here</p>"},{"location":"api/#version-v1","title":"Version: v1","text":""},{"location":"api/#terms-of-service","title":"Terms of service","text":"<p>https://example.com/terms</p> <p>Contact information: Example Contact https://example.com/contact  </p> <p>License: Example License</p>"},{"location":"api/#register","title":"/register","text":""},{"location":"api/#post","title":"POST","text":""},{"location":"api/#responses","title":"Responses","text":"Code Description 200 Success 400 Bad Request"},{"location":"api/#login","title":"/login","text":""},{"location":"api/#post_1","title":"POST","text":""},{"location":"api/#parameters","title":"Parameters","text":"Name Located in Description Required Schema useCookies query No boolean useSessionCookies query No boolean"},{"location":"api/#responses_1","title":"Responses","text":"Code Description 200 Success"},{"location":"api/#refresh","title":"/refresh","text":""},{"location":"api/#post_2","title":"POST","text":""},{"location":"api/#responses_2","title":"Responses","text":"Code Description 200 Success"},{"location":"api/#confirmemail","title":"/confirmEmail","text":""},{"location":"api/#get","title":"GET","text":""},{"location":"api/#parameters_1","title":"Parameters","text":"Name Located in Description Required Schema userId query No string code query No string changedEmail query No string"},{"location":"api/#responses_3","title":"Responses","text":"Code Description 200 Success"},{"location":"api/#resendconfirmationemail","title":"/resendConfirmationEmail","text":""},{"location":"api/#post_3","title":"POST","text":""},{"location":"api/#responses_4","title":"Responses","text":"Code Description 200 Success"},{"location":"api/#forgotpassword","title":"/forgotPassword","text":""},{"location":"api/#post_4","title":"POST","text":""},{"location":"api/#responses_5","title":"Responses","text":"Code Description 200 Success 400 Bad Request"},{"location":"api/#resetpassword","title":"/resetPassword","text":""},{"location":"api/#post_5","title":"POST","text":""},{"location":"api/#responses_6","title":"Responses","text":"Code Description 200 Success 400 Bad Request"},{"location":"api/#manage2fa","title":"/manage/2fa","text":""},{"location":"api/#post_6","title":"POST","text":""},{"location":"api/#responses_7","title":"Responses","text":"Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found"},{"location":"api/#security","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#manageinfo","title":"/manage/info","text":""},{"location":"api/#get_1","title":"GET","text":""},{"location":"api/#responses_8","title":"Responses","text":"Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found"},{"location":"api/#security_1","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#post_7","title":"POST","text":""},{"location":"api/#responses_9","title":"Responses","text":"Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Not Found"},{"location":"api/#security_2","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#apiemailsignupsformformid","title":"/api/EmailSignups/form/{formId}","text":""},{"location":"api/#get_2","title":"GET","text":""},{"location":"api/#summary","title":"Summary:","text":"<p>Get email signups for a specific form.</p>"},{"location":"api/#description","title":"Description:","text":"<p>Sample request:</p> <pre><code>GET /api/EmailSignups/form/5\n</code></pre>"},{"location":"api/#parameters_2","title":"Parameters","text":"Name Located in Description Required Schema formId path Form id to get email signups for. Yes integer"},{"location":"api/#responses_10","title":"Responses","text":"Code Description 200 Returns all email signups for the form. 400 If the user is not authenticated. 401 Unauthorized 403 Forbidden 404 If the form is not found."},{"location":"api/#security_3","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#apiemailsignups","title":"/api/EmailSignups","text":""},{"location":"api/#post_8","title":"POST","text":""},{"location":"api/#summary_1","title":"Summary:","text":"<p>Signup for an email form.</p>"},{"location":"api/#description_1","title":"Description:","text":"<p>Sample request:</p> <pre><code>POST /api/EmailSignups\n{\n    \"FormId\": \"5\",\n    \"Email\": \"example@email.com\"\n}\n</code></pre>"},{"location":"api/#responses_11","title":"Responses","text":"Code Description 200 Email signup to form was successful 400 If the email is invalid 404 If the form is not found 409 If the form is not active, or the email address is already signed up for this form. 429 If API calls quota exceeded - 10 calls per 1min"},{"location":"api/#apiemailsignupsconfirmations","title":"/api/EmailSignups/confirmations","text":""},{"location":"api/#get_3","title":"GET","text":""},{"location":"api/#parameters_3","title":"Parameters","text":"Name Located in Description Required Schema confirmationToken query No string"},{"location":"api/#responses_12","title":"Responses","text":"Code Description 200 Success"},{"location":"api/#apisignupforms","title":"/api/SignupForms","text":""},{"location":"api/#get_4","title":"GET","text":""},{"location":"api/#summary_2","title":"Summary:","text":"<p>Get all signup forms for the current user.</p>"},{"location":"api/#description_2","title":"Description:","text":"<p>Sample request:</p> <pre><code>Get /api/SignupForms\n</code></pre>"},{"location":"api/#responses_13","title":"Responses","text":"Code Description 200 Returns all signup forms the current user has created. 401 If the user is not authenticated 403 Forbidden"},{"location":"api/#security_4","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#post_9","title":"POST","text":""},{"location":"api/#summary_3","title":"Summary:","text":"<p>Creates a new signup form.</p>"},{"location":"api/#description_3","title":"Description:","text":"<p>Sample Requests:</p> <p>Create a new form:</p> <pre><code>POST /api/SignupForms\n{\n    \"FormName\": \"My Form\"\n}\n</code></pre> <p>Create a new inactive form:</p> <pre><code>POST /api/SignupForms\n{\n    \"FormName\": \"My Form\",\n    \"Status\": \"Inactive\"\n}\n</code></pre>"},{"location":"api/#responses_14","title":"Responses","text":"Code Description 200 Success 201 Returns the newly created form. 400 If the user is not authenticated. 401 Unauthorized 403 Forbidden"},{"location":"api/#security_5","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#apisignupformsid","title":"/api/SignupForms/{id}","text":""},{"location":"api/#get_5","title":"GET","text":""},{"location":"api/#summary_4","title":"Summary:","text":"<p>Get a specific signup form.</p>"},{"location":"api/#description_4","title":"Description:","text":"<p>Sample request:</p> <pre><code>Get /api/SignupForms/5\n</code></pre>"},{"location":"api/#parameters_4","title":"Parameters","text":"Name Located in Description Required Schema id path Signup form id Yes integer"},{"location":"api/#responses_15","title":"Responses","text":"Code Description 200 Returns the signup form matching the id. 400 If the user is not authenticated. 401 Unauthorized 403 Forbidden 404 If the signup form is not found."},{"location":"api/#security_6","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#delete","title":"DELETE","text":""},{"location":"api/#summary_5","title":"Summary:","text":"<p>Deletes a signup form.</p>"},{"location":"api/#description_5","title":"Description:","text":"<p>Sample request:</p> <pre><code>DELETE /api/SignupForms/5\n</code></pre>"},{"location":"api/#parameters_5","title":"Parameters","text":"Name Located in Description Required Schema id path Id of form to delete. Yes integer"},{"location":"api/#responses_16","title":"Responses","text":"Code Description 200 Success 204 If the form is deleted successfully. 400 If the user is not authenticated. 401 Unauthorized 403 Forbidden 404 If the form is not found."},{"location":"api/#security_7","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"api/#put","title":"PUT","text":""},{"location":"api/#summary_6","title":"Summary:","text":"<p>Updates a signup form.</p>"},{"location":"api/#description_6","title":"Description:","text":"<p>Sample requests:</p> <p>Updating all info:</p> <pre><code>PUT /api/SignupForms/5\n{\n    \"FormName\": \"Updated Form Name\",\n    \"Status\": \"Inactive\"\n}\n</code></pre> <p>Updating only status:</p> <pre><code>PUT /api/SignupForms/5\n{\n    \"Status\": \"Active\"\n}\n</code></pre>"},{"location":"api/#parameters_6","title":"Parameters","text":"Name Located in Description Required Schema id path Id of a form to update Yes integer"},{"location":"api/#responses_17","title":"Responses","text":"Code Description 200 Success 401 Unauthorized 403 Forbidden"},{"location":"api/#security_8","title":"Security","text":"Security Schema Scopes oauth2"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"usage/accept_signups/","title":"Accepting signups for a form","text":"<p>Once you've created a form in Collecto, you'll receive a unique FormId in the response. This FormId is essential for accepting signups for that specific form. Here's how you can collect signups using the API.</p> <p>In case you need a reminder on how to create a form go here.</p> <p>Now that you have the FormId, you can use it to accept signups by making a POST request to the following endpoint:</p> <pre><code>POST /api/EmailSignups\n{\n    \"FormId\": \"5\",\n    \"Email\": \"example@email.com\"\n}\n</code></pre> <p>Note that this endpoint is public, and does not require the authorization header.</p> <p>If you have email confirmations on, an email confirmation will be sent to <code>example@email.com</code> asking to confirm the signup. If the user didn't confirm the signup will be dropped.</p>"},{"location":"usage/accept_signups/#using-collecto-on-your-site","title":"Using Collecto on your site","text":"<p>Here is a simple HTML + JS example on how you can use collecto to collect emails in your site w/ two simple steps.</p> <ol> <li> <p>Create a HTML form <pre><code>&lt;form id=\"signup-form\" action=\"https://your-collecto-instance.com/api/EmailSignups\" method=\"POST\"&gt;\n        &lt;input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required&gt;\n        &lt;input type=\"submit\" value=\"Tell me more\"&gt;\n&lt;/form&gt;\n</code></pre></p> </li> <li> <p>Add a JS script to call collecto <pre><code>&lt;script&gt;\n    document.getElementById('signup-form').addEventListener('submit', async function(e) {\n        e.preventDefault();\n\n        const formData = new FormData(this);\n        const email = formData.get('email');\n        const formId = '1'; // Update with your actual form ID\n        const collectoDomain = 'https://your-collecto-instance.com';\n        const messageDiv = document.getElementById('form-message');\n\n        try {\n            const response = await axios.post(`${collectoDomain}/api/EmailSignups`, {\n                formId,\n                email\n            });\n\n            messageDiv.style.display = 'block';\n            messageDiv.className = 'message success';\n            messageDiv.textContent = 'Signup successful! Please check your email to confirm your subscription.';\n            this.reset();\n        } catch (error) {\n            console.error('Error during signup:', error);\n            messageDiv.style.display = 'block';\n            messageDiv.className = 'message error';\n\n            if (error.response) {\n                switch (error.response.status) {\n                    case 400: // Bad Request\n                        messageDiv.textContent = 'Invalid email address.';\n                        break;\n                    case 404: // Not Found\n                        messageDiv.textContent = 'Signup form not found.';\n                        break;\n                    case 409: // Conflict\n                        if (error.response.data.includes('Email address already signed up')) {\n                            messageDiv.textContent = 'Email address already signed up.';\n                        } else if (error.response.data.includes('Form is not active')) {\n                            messageDiv.textContent = 'Signup form is not active.';\n                        } else {\n                            messageDiv.textContent = 'A conflict occurred. Please try again.';\n                        }\n                        break;\n                    default:\n                        messageDiv.textContent = 'An unexpected error occurred. Please try again.';\n                }\n            } else {\n                messageDiv.textContent = 'Network error. Please check your internet connection and try again.';\n            }\n        }\n    });\n&lt;/script&gt;\n</code></pre></p> </li> </ol>"},{"location":"usage/create_forms/","title":"Create a form w/ Collecto","text":"<p>This guide will walk you through the steps to create a new signup form using Collecto's API. To perform this action, you'll need to:</p> <ul> <li>Login (or register if needed) to obtain a Bearer token.</li> <li>Use the token to authorize your API request to create the form.</li> </ul>"},{"location":"usage/create_forms/#register","title":"Register","text":"<p>To register, first start the application - refer to here for guidance.</p> <p>After the application is live, you can access the following url To register : localhost:5001/Identity/Account/Register</p> <p>Note that if you just registered, you might need to confirm your registration based on the configuration of environment variables. Learn more here.</p>"},{"location":"usage/create_forms/#creating-a-form","title":"Creating a form","text":"<p>To create a form we first need to obtain a bearer token via the /login endpoint.</p> <p>To login make the following api call</p> <pre><code>POST /login\n\nBODY\n\n{\n    \"email\": \"email_you_registered_with\"\n    \"password\": \"password_you_registered_with\n}\n</code></pre> <p>Example response</p> <pre><code>{\n    \"tokenType\": \"Bearer\",\n    \"accessToken\": \"CfDJ8DG6wMVUulxDuszI796dx4uVk-4nASZd9Hy_Jjd7qv4S4C-8O34PvkXlBuRFuA8XM-OmZsb3V3LTaoa2AYVFYOvA2MqbkzY0OyEa4a8HtpAXI8KROFLs8jEwsIOrw47x7xcd4bMdlYlC7hRJd3FXIppf87R7nNDxCcIO-nimkcUAY6weYKwIwa6XWumuyAI89E1EyKbOmyjJOrfi7uf6J1_0JzM7kJkFAHrQR2Um4mdb6zNtD7mwpvjCaCTbWwoH7LKbYO72sNV3DhJs2o7o7G9yJiog0vy9-QQXrWULS2O2N9rMLLB_dfNIDJaqLLMDUWFttQUK0uFvJNrdL7Tu4q-N8Xd0TVGckCbYLxMZQ33aACXdRvQbgyM8LD8nAaydQvVUnAP623-x0UxZFwvCanXkl6fG2vELEhjDClRBDLr2XWMJ-AkgyXoyGyYSqMrbMb2LWXvWv89f_YD8aZ2wBeRS0gTJ2OKYv8tCQhsjO8rGMw5PuIxrsFqej6KEcyFa2LPXKQJjCl8hBJOn_ey0sYC2e08VUCZbE0RQxMuhfH27yBIp76OanXdSrH1Tz7prsJR3O1EalgEwgktFYD2jwSa_3Y5n9GCp_OZ6RFODJp49P5YxhfC-RGPtJW7pGGY9O5Z3xY3n98GjzHKZlZ6gwAFzVg_pniM7B-WWNKmXu9RzCeOlF81RIkqiCWCSp_9vvyll3-AiTtKkDn44KWqbuoE\",\n    \"expiresIn\": 3600,\n    \"refreshToken\": \"CfDJ8DG6wMVUulxDuszI796dx4srTN8_f5x54qdNPY-zzEAkCulSC2OgdnHFUv0RmL_U-BCLlm_r90b4Moqz7Irh_U4C5t0S-ZklNPjQMiLTGdL1aPpbuuBNVwFpTiDOhrGJGxR-imupgcLc3NCKjpyKSp9e5OaD_lz-XbJGcZiob9Qe2FrDA9ze61m8lwkZ4S0XT16DevxdTz_sJleMbLz7UoIscIN97fStvglSSbDESIAu8ITt14-N-acESBUwPiHHy9Ri-h7ZBHf7vkjwJiH9wlxTo-KhRlES6lVq-LJf0_mig2-MRjS6mmnaSOopFhUJKvqI9PZb0Q5n9dQ8j8uqUgsYWXGbbpTl3z9Wr9E3RnVkqUqaEHagyWRsGycayrBM7_ZaQMGbKo1oNuqFKxxCL8a6IzHq9TNSDyuErv2_GO_Ak6b7gVDvaFahqQv_bPA69x_-dRwYoJ-H5fY___UQ4fL_aYQ21SVo3ksV3Dp6rT3zeQ4Nd5sqohl-fidXvcRjknCDdo0RyY4yuL5dkwYWDOCOQxMoyfJQ0uAA6iFQgL-PWD-pfTOW5pjhzv3KdYkGYUqoyoVrmL-hzBv_uuvwv5iNZ8qN7GJkY_6V4N2q8d8F8ms_dNVN3_5nLp5OBY5gNF-Zxy0k9ah8URlKq04dlkut80PfsqGjXCfrgLVYDBk_2GZ9r3Ou7Um0SBboTt5ES1clJ1-xuaMdgdHPvi6McdI\"\n}\n</code></pre> <p>Now to create a form, we will use the token in the \"accessToken\" field in the authorization header with the bearer prefix - \"Bearer &lt;Token&gt;\".  </p> <p>Make the following request</p> <pre><code>POST /api/SignupForms\n{\n    \"formName\": \"My Form\"\n}\n</code></pre>"},{"location":"usage/overview/","title":"Usage Overview","text":""},{"location":"usage/overview/#prerequisites","title":"Prerequisites","text":"<p>Before you get started, ensure you have the following installed on your system:</p> <p>Git: Used for cloning the repository. Install Git from here. Docker: Used for running the application in containers. Install Docker from here. Docker Compose: Ensure Docker Compose is installed as part of your Docker installation. If not, refer to here </p>"},{"location":"usage/overview/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/Eliran-Turgeman/Collecto.git\ncd Collecto\n</code></pre>"},{"location":"usage/overview/#setup-running-the-application","title":"Setup &amp; Running the Application","text":"<p>Collecto uses Docker Compose to run its services, including the email collection API and Redis for caching. To get the application up and running, follow these steps:</p> <ol> <li>Make sure you are in the project directory where the docker-compose.yml file is located.</li> <li>Run the following command to build and start the services:</li> </ol> <pre><code>docker-compose up --build\n</code></pre> <p>Once the services are up and running:</p> <ul> <li>The Collecto API will be available at: http://localhost:5001</li> <li>You can access the Swagger UI (for API testing and exploration) at: http://localhost:5001/swagger/index.html</li> </ul> <p>To stop the running containers, use the following command:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"usage/overview/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the solution root and make sure you configure the following variables:</p> <ul> <li>EMAIL_FROM - Email confirmations will be sent from this address</li> <li>EMAIL_SMTP_SERVER - SMTP server that will be used to deliver confirmation emails (i.e smtp.gmail.com)</li> <li>EMAIL_USERNAME - Your email address, in most cases should be identical to EMAIL_FROM</li> <li>EMAIL_PASSWORD = Password to authenticate to your email account.</li> <li>VALID_CORS_ORIGINS = In order to make API calls to collecto from your site, enter your site url here. Can be left empty in case you don't have a site url yet. Supports multiple origins separated by a comma (\",\").</li> <li>COLLECTO_DOMAIN = If you deployed collecto, you can populate this field so that links from emails are redirected correctly. (defaults to localhost:5001)</li> </ul>"},{"location":"usage/overview/#configuration","title":"Configuration","text":""},{"location":"usage/overview/#rate-limiting","title":"Rate Limiting","text":"<p>The IpRateLimiting section in the <code>appsettings.json</code> file defines how Collecto handles requests to protect against abuse or spamming by limiting the number of requests that can be made within a specific time period.</p> <pre><code>\"IpRateLimiting\": {\n  \"EnableEndpointRateLimiting\": true,\n  \"StackBlockedRequests\": false,\n  \"RealIpHeader\": \"X-Real-IP\",\n  \"ClientIdHeader\": \"X-ClientId\",\n  \"HttpStatusCode\": 429,\n  \"GeneralRules\": [\n    {\n      \"Endpoint\": \"*:/api/EmailSignups\",\n      \"Period\": \"1m\",\n      \"Limit\": 10\n    }\n  ]\n}\n</code></pre> <ul> <li> <p>EnableEndpointRateLimiting: This enables rate limiting for specific endpoints. In this case, rate limiting is applied to the /api/EmailSignups endpoint.</p> </li> <li> <p>StackBlockedRequests: This setting controls whether requests that hit the rate limit are \"stacked\" and retried automatically. In this case, it\u2019s set to false, meaning that blocked requests won\u2019t be automatically retried.</p> </li> <li> <p>RealIpHeader: This defines the header to check for the real IP address. This is useful when the application is behind a proxy or load balancer, where the IP address in the request might be that of the proxy, not the client.</p> </li> <li> <p>ClientIdHeader: Defines a custom header (X-ClientId) that can be used to identify the client making the request, which can be useful for applying rate limits based on specific users.</p> </li> <li> <p>HttpStatusCode: Specifies the HTTP status code to return when a client exceeds the allowed request limit. In this case, 429 indicates \"Too Many Requests.\"</p> </li> <li> <p>GeneralRules: This is an array of rate-limiting rules. In this example:</p> <ul> <li>Endpoint: *:/api/EmailSignups applies the rule to any HTTP method (GET, POST, etc.) on the /api/EmailSignups endpoint.</li> <li>Period: 1m specifies a 1-minute period.</li> <li>Limit: 10 specifies that a maximum of 10 requests can be made from a single IP address to this endpoint in 1 minute.</li> </ul> </li> </ul>"},{"location":"usage/overview/#feature-toggles","title":"Feature Toggles","text":"<p>The FeatureToggles section in the <code>appsettings.json</code> file allows you to enable or disable specific features within the application without modifying the codebase. This is useful for rolling out new features incrementally or for A/B testing.</p> <pre><code>\"FeatureToggles\": {\n  \"EmailConfirmation\": true\n}\n</code></pre> <ul> <li>EmailConfirmation: When set to true, this enables the email confirmation feature, meaning:<ol> <li>Users will need to confirm their email address as part of the signup process.</li> <li>When someone signs up to a form you created, they will have to confirm the signup.</li> </ol> </li> </ul>"}]}